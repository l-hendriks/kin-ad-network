service: kin-ad-network

plugins:
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  environment:
    REGION: ${self:provider.region}
    CLIENT_TABLE_NAME: ${self:provider.stage}-clients
    EVENTS_TABLE_NAME: ${self:provider.stage}-events
    ECPM_TABLE_NAME: ${self:provider.stage}-eCPM
    IRONSOURCE_PRIVATE_KEY: ${self:custom.credentials.IRONSOURCE_PRIVATE_KEY}
    IRONSOURCE_SECRET_KEY: ${self:custom.credentials.IRONSOURCE_SECRET_KEY}
    IRONSOURCE_REFRESH_TOKEN: ${self:custom.credentials.IRONSOURCE_REFRESH_TOKEN}
    GOOGLE_CREDENTIALS_JSON:  ${self:custom.credentials.GOOGLE_CREDENTIALS_JSON}
    GOOGLE_SHEET_ID:  ${self:custom.credentials.GOOGLE_SHEET_ID}
  stackPolicy:
    - { Effect: Allow, Principal: "*", Action: "Update:*", Resource: "*"}
    - Effect: Deny
      Principal: "*"
      Action: ["Update:Replace", "Update:Delete"]
      Resource: LogicalResourceId/DynamoDBClientsTable
    - Effect: Deny
      Principal: "*"
      Action: ["Update:Replace", "Update:Delete"]
      Resource: LogicalResourceId/DynamoDBEventsTable
    - Effect: Deny
      Principal: "*"
      Action: ["Update:Replace", "Update:Delete"]
      Resource: LogicalResourceId/DynamoDBECPMTable
  iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:Query
      Resource:
        - { "Fn::Join" : [ "", [ { "Fn::GetAtt": ["DynamoDBClientsTable", "Arn"] }, "*" ] ] }
    - Effect: Allow
      Action:
      - dynamodb:Query
      - dynamodb:UpdateItem
      Resource:
        - { "Fn::Join" : [ "", [ { "Fn::GetAtt": ["DynamoDBEventsTable", "Arn"] }, "*" ] ] }
    - Effect: Allow
      Action:
      - dynamodb:Query
      - dynamodb:UpdateItem
      Resource:
        - { "Fn::Join" : [ "", [ { "Fn::GetAtt": ["DynamoDBECPMTable", "Arn"] }, "*" ] ] }

custom:
  credentials: ${ssm:/aws/reference/secretsmanager/${self:provider.stage}~true}

functions:
  ironsource_callback:
    handler: handlers/ironsource.default
    timeout: 30
    events:
      - http:
          path: ironsource
          method: get
  reporting:
    handler: handlers/reporting.default
    timeout: 300
    events:
      - schedule: cron(0 18 * * ? *) # Every day at 6:00PM UTC
  eCPM:
    handler: handlers/eCPM.default
    timeout: 30
    events:
      - http:
          path: eCPM
          method: get

resources:
 Resources:
  DynamoDBClientsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:provider.stage}-clients
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: "clientId"
          AttributeType: S
      KeySchema:
        - AttributeName: "clientId"
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  DynamoDBEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:provider.stage}-events
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: "clientId"
          AttributeType: S
        - AttributeName: "eventId"
          AttributeType: S
      KeySchema:
        - AttributeName: "clientId"
          KeyType: HASH
        - AttributeName: "eventId"
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  DynamoDBECPMTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:provider.stage}-eCPM
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: "clientId"
          AttributeType: S
        - AttributeName: "date"
          AttributeType: S
      KeySchema:
        - AttributeName: "clientId"
          KeyType: HASH
        - AttributeName: "date"
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
