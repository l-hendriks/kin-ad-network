service: kin-ad-network

plugins:
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  logRetentionInDays: 14
  profile: kinads
  stage: ${opt:stage, 'dev'}
  environment:
    REGION: ${self:provider.region}
    CLIENT_TABLE_NAME: ${self:provider.stage}-clients
    EVENTS_TABLE_NAME: ${self:provider.stage}-events
    INFO_TABLE_NAME: ${self:provider.stage}-info
    IRONSOURCE_PRIVATE_KEY: ${self:custom.credentials.IRONSOURCE_PRIVATE_KEY}
    IRONSOURCE_SECRET_KEY: ${self:custom.credentials.IRONSOURCE_SECRET_KEY}
    IRONSOURCE_REFRESH_TOKEN: ${self:custom.credentials.IRONSOURCE_REFRESH_TOKEN}
    GOOGLE_CREDENTIALS_JSON:  ${self:custom.credentials.GOOGLE_CREDENTIALS_JSON}
    GOOGLE_SHEET_ID:  ${self:custom.credentials.GOOGLE_SHEET_ID}
  stackPolicy:
    - { Effect: Allow, Principal: "*", Action: "Update:*", Resource: "*"}
    - Effect: Deny
      Principal: "*"
      Action: ["Update:Replace", "Update:Delete"]
      Resource: LogicalResourceId/DynamoDBClientsTable
    - Effect: Deny
      Principal: "*"
      Action: ["Update:Replace", "Update:Delete"]
      Resource: LogicalResourceId/DynamoDBEventsTable
    - Effect: Deny
      Principal: "*"
      Action: ["Update:Replace", "Update:Delete"]
      Resource: LogicalResourceId/DynamoDBInfoTable
  iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:Query
      Resource:
        - { "Fn::Join" : [ "", [ { "Fn::GetAtt": ["DynamoDBClientsTable", "Arn"] }, "*" ] ] }
    - Effect: Allow
      Action:
      - dynamodb:Query
      - dynamodb:UpdateItem
      Resource:
        - { "Fn::Join" : [ "", [ { "Fn::GetAtt": ["DynamoDBEventsTable", "Arn"] }, "*" ] ] }
    - Effect: Allow
      Action:
      - dynamodb:Query
      - dynamodb:UpdateItem
      Resource:
        - { "Fn::Join" : [ "", [ { "Fn::GetAtt": ["DynamoDBInfoTable", "Arn"] }, "*" ] ] }

custom:
  credentials: ${ssm:/aws/reference/secretsmanager/${self:provider.stage}~true}
  dev:
    url: "https://dashboard-dev.kinads.org"
  staging:
    url: "https://dashboard-staging.kinads.org"
  production:
    url: "https://dashboard.kinads.org"

functions:
  ironsource_callback:
    handler: handlers/ironsource.default
    timeout: 30
    events:
      - http:
          path: ironsource
          method: get
  reporting:
    handler: handlers/reporting.default
    timeout: 300
    events:
      - schedule: cron(0 18 * * ? *) # Every day at 6:00PM UTC
  info:
    handler: handlers/info.default
    timeout: 30
    events:
      - http:
          path: info
          method: get
  preSignup:
    handler: handlers/preSignup.default
    timeout: 30

resources:
 Resources:
  DynamoDBClientsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:provider.stage}-clients
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: "clientId"
          AttributeType: S
      KeySchema:
        - AttributeName: "clientId"
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  DynamoDBEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:provider.stage}-events
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: "clientId"
          AttributeType: S
        - AttributeName: "eventId"
          AttributeType: S
      KeySchema:
        - AttributeName: "clientId"
          KeyType: HASH
        - AttributeName: "eventId"
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: expires
        Enabled: true

  DynamoDBInfoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:provider.stage}-info
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: "clientId"
          AttributeType: S
        - AttributeName: "date"
          AttributeType: S
      KeySchema:
        - AttributeName: "clientId"
          KeyType: HASH
        - AttributeName: "date"
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: kin-ads-${self:provider.stage}
      AutoVerifiedAttributes: [email]
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailSubject: "Kin Ad Network Dashboads"
          EmailMessage: |-
            Username: {username}<br />
            Password: {####}<br /><br  />

            Dashboard url: <a href="${self:custom.${self:provider.stage}.url}" target="_blank">${self:custom.${self:provider.stage}.url}</a>
      LambdaConfig:
        PreSignUp: { "Fn::GetAtt": ["PreSignupLambdaFunction", "Arn"] }
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: False
          RequireUppercase: False
          RequireNumbers: False
          RequireSymbols: False
      Schema:
        - { Name: email, Required: true }

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: kin-ads-${self:provider.stage}
      GenerateSecret: False
      UserPoolId: { "Ref": "UserPool" }

  UserPoolLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: { "Fn::GetAtt": ["PreSignupLambdaFunction", "Arn"] }
      Principal: "cognito-idp.amazonaws.com"
      SourceArn: { "Fn::GetAtt": ["UserPool", "Arn"] }

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: kinads${self:provider.stage}
      AllowUnauthenticatedIdentities: False
      CognitoIdentityProviders:
        - ClientId: { "Ref": "UserPoolClient" }
          ProviderName: {
            "Fn::Join": ["/", ["cognito-idp.${self:provider.region}.amazonaws.com", { "Ref": "UserPool" } ]]
          }

  AdminGroupIdentityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Federated: cognito-identity.amazonaws.com }
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": { "Ref": "IdentityPool" }
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "authenticated"
      Policies:
        - PolicyName: ManagerAdminIdentityPolice-${self:provider.stage}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:ListUsers
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminDeleteUser
                Resource: { "Fn::GetAtt": ["UserPool", "Arn"] }
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'

  UserPoolAdminGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: AdminGroup
      Precedence: 1
      RoleArn:  { "Fn::GetAtt": ["AdminGroupIdentityRole", "Arn"] }
      UserPoolId: { "Ref": "UserPool" }
